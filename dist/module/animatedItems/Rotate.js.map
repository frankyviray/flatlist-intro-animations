{"version":3,"sources":["Rotate.tsx"],"names":["React","useEffect","useRef","View","Animated","Easing","RotateItem","renderItem","args","animationDuration","focused","rotateX","Value","current","translateX","interpolate","inputRange","outputRange","itemStyles","transform","timing","toValue","duration","delay","index","easing","linear","useNativeDriver","start"],"mappings":"AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,MAA3B,QAAyC,OAAzC;AACA,SACEC,IADF,EAEEC,QAFF,EAKEC,MALF,QAOO,cAPP;;AAgBA,MAAMC,UAA2B,GAAG,CAAC;AACnCC,EAAAA,UADmC;AAEnCC,EAAAA,IAFmC;AAGnCC,EAAAA,iBAAiB,GAAG,GAHe;AAInCC,EAAAA;AAJmC,CAAD,KAK9B;AACJ,QAAMC,OAAO,GAAGT,MAAM,CAAC,IAAIE,QAAQ,CAACQ,KAAb,CAAmB,CAAnB,CAAD,CAAN,CAA8BC,OAA9C;AAEA,QAAMC,UAAU,GAAGH,OAAO,CAACI,WAAR,CAAoB;AACrCC,IAAAA,UAAU,EAAE,CAAC,CAAD,EAAI,CAAJ,CADyB;AAErCC,IAAAA,WAAW,EAAE,CAAC,OAAD,EAAU,QAAV;AAFwB,GAApB,CAAnB;AAKA,QAAMC,UAAU,GAAG,CACjB;AACEC,IAAAA,SAAS,EAAE,CACT;AACER,MAAAA,OAAO,EAAEG;AADX,KADS;AADb,GADiB,CAAnB;AAUAb,EAAAA,SAAS,CAAC,MAAM;AACdG,IAAAA,QAAQ,CAACgB,MAAT,CAAgBT,OAAhB,EAAyB;AACvBU,MAAAA,OAAO,EAAEX,OAAO,GAAG,CAAH,GAAO,CADA;AAEvBY,MAAAA,QAAQ,EAAEb,iBAFa;AAGvBc,MAAAA,KAAK,EAAEf,IAAI,CAACgB,KAAL,GAAa,EAHG;AAIvBC,MAAAA,MAAM,EAAEpB,MAAM,CAACqB,MAJQ;AAKvBC,MAAAA,eAAe,EAAE;AALM,KAAzB,EAMGC,KANH;AAOD,GARQ,EAQN,CAAClB,OAAD,CARM,CAAT;;AAUA,MAAI,CAACA,OAAL,EAAc;AACZ,WAAO,IAAP;AACD;;AAED,sBACE,oBAAC,IAAD,qBACE,oBAAC,QAAD,CAAU,IAAV;AAAe,IAAA,KAAK,EAAEQ;AAAtB,KAAmCX,UAAU,CAACC,IAAD,CAA7C,CADF,CADF;AAKD,CA1CD;;AA4CA,eAAeF,UAAf","sourcesContent":["import React, { useEffect, useRef } from 'react';\nimport {\n  View,\n  Animated,\n  ListRenderItem,\n  SectionListRenderItem,\n  Easing,\n  ListRenderItemInfo,\n} from 'react-native';\n\ninterface Props {\n  renderItem: ListRenderItem<any> | SectionListRenderItem<object>;\n  args: any;\n  animationDuration?: number;\n  focused?: boolean;\n}\n\nconst RotateItem: React.FC<Props> = ({\n  renderItem,\n  args,\n  animationDuration = 700,\n  focused,\n}) => {\n  const rotateX = useRef(new Animated.Value(0)).current;\n\n  const translateX = rotateX.interpolate({\n    inputRange: [0, 1],\n    outputRange: ['90deg', '360deg'],\n  });\n\n  const itemStyles = [\n    {\n      transform: [\n        {\n          rotateX: translateX,\n        },\n      ],\n    },\n  ];\n\n  useEffect(() => {\n    Animated.timing(rotateX, {\n      toValue: focused ? 1 : 0,\n      duration: animationDuration,\n      delay: args.index * 50,\n      easing: Easing.linear,\n      useNativeDriver: true,\n    }).start();\n  }, [focused]);\n\n  if (!focused) {\n    return null;\n  }\n\n  return (\n    <View>\n      <Animated.View style={itemStyles}>{renderItem(args)}</Animated.View>\n    </View>\n  );\n};\n\nexport default RotateItem;\n"]}