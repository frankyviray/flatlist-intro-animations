{"version":3,"sources":["SlideFromRight.tsx"],"names":["React","useEffect","useRef","Animated","Dimensions","WIDTH","get","width","SlideFromRightItem","renderItem","args","focused","x","Value","current","translateX","interpolate","inputRange","outputRange","itemStyles","transform","spring","toValue","delay","index","useNativeDriver","start"],"mappings":"AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,MAA3B,QAAyC,OAAzC;AACA,SACEC,QADF,EAEEC,UAFF,QAOO,cAPP;AAeA,MAAMC,KAAK,GAAGD,UAAU,CAACE,GAAX,CAAe,QAAf,EAAyBC,KAAvC;;AAEA,MAAMC,kBAAmC,GAAG,CAAC;AAAEC,EAAAA,UAAF;AAAcC,EAAAA,IAAd;AAAoBC,EAAAA;AAApB,CAAD,KAAmC;AAC7E,QAAMC,CAAC,GAAGV,MAAM,CAAC,IAAIC,QAAQ,CAACU,KAAb,CAAmB,CAAnB,CAAD,CAAN,CAA8BC,OAAxC;AAEA,QAAMC,UAAU,GAAGH,CAAC,CAACI,WAAF,CAAc;AAC/BC,IAAAA,UAAU,EAAE,CAAC,CAAD,EAAI,CAAJ,CADmB;AAE/BC,IAAAA,WAAW,EAAE,CAACb,KAAD,EAAQ,CAAR;AAFkB,GAAd,CAAnB;AAKA,QAAMc,UAAU,GAAG,CACjB;AACEC,IAAAA,SAAS,EAAE,CACT;AACEL,MAAAA;AADF,KADS;AADb,GADiB,CAAnB;AAUAd,EAAAA,SAAS,CAAC,MAAM;AACdE,IAAAA,QAAQ,CAACkB,MAAT,CAAgBT,CAAhB,EAAmB;AACjBU,MAAAA,OAAO,EAAEX,OAAO,GAAG,CAAH,GAAO,CADN;AAEjBY,MAAAA,KAAK,EAAEb,IAAI,CAACc,KAAL,GAAa,EAFH;AAGjBC,MAAAA,eAAe,EAAE;AAHA,KAAnB,EAIGC,KAJH;AAKD,GANQ,CAAT;;AAQA,MAAI,CAACf,OAAL,EAAc;AACZ,WAAO,IAAP;AACD;;AAED,sBAAO,oBAAC,QAAD,CAAU,IAAV;AAAe,IAAA,KAAK,EAAEQ;AAAtB,KAAmCV,UAAU,CAACC,IAAD,CAA7C,CAAP;AACD,CA/BD;;AAiCA,eAAeF,kBAAf","sourcesContent":["import React, { useEffect, useRef } from 'react';\nimport {\n  Animated,\n  Dimensions,\n  ListRenderItem,\n  SectionListRenderItem,\n  SectionListRenderItemInfo,\n  ListRenderItemInfo,\n} from 'react-native';\n\ninterface Props {\n  renderItem: ListRenderItem<any> | SectionListRenderItem<object>;\n  args: any;\n  focused?: boolean;\n}\n\nconst WIDTH = Dimensions.get('window').width;\n\nconst SlideFromRightItem: React.FC<Props> = ({ renderItem, args, focused }) => {\n  const x = useRef(new Animated.Value(0)).current;\n\n  const translateX = x.interpolate({\n    inputRange: [0, 1],\n    outputRange: [WIDTH, 0],\n  });\n\n  const itemStyles = [\n    {\n      transform: [\n        {\n          translateX,\n        },\n      ],\n    },\n  ];\n\n  useEffect(() => {\n    Animated.spring(x, {\n      toValue: focused ? 1 : 0,\n      delay: args.index * 50,\n      useNativeDriver: true,\n    }).start();\n  });\n\n  if (!focused) {\n    return null;\n  }\n\n  return <Animated.View style={itemStyles}>{renderItem(args)}</Animated.View>;\n};\n\nexport default SlideFromRightItem;\n"]}