{"version":3,"sources":["AnimatedFlatList.tsx"],"names":["React","FlatList","SlideFromBottomAnimatedItem","SlideFromRightAnimatedItem","FadeAnimatedItem","AnimationType","RotateAnimatedItem","DiveAnimatedItem","AnimatedFlatList","data","renderItem","animationType","animationDuration","focused","flatlistRef","contentContainerStyle","scrollIndicatorInsets","ListEmptyComponent","ListHeaderComponent","ListFooterComponent","numColumns","onScroll","onViewableItemsChanged","viewabilityConfig","refreshing","onRefresh","keyExtractor","handleRenderItem","args","SlideFromBottom","SlideFromRight","Fade","Rotate","Dive","None"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SACEC,QADF,QASO,cATP;AAWA,SACEC,2BADF,EAEEC,0BAFF,EAGEC,gBAHF,EAIEC,aAJF,EAKEC,kBALF,EAMEC,gBANF,QAOO,GAPP;;AAmCA,MAAMC,gBAAiC,GAAG,CAAC;AACzCC,EAAAA,IADyC;AAEzCC,EAAAA,UAFyC;AAGzCC,EAAAA,aAHyC;AAIzCC,EAAAA,iBAJyC;AAKzCC,EAAAA,OAAO,GAAG,IAL+B;AAMzCC,EAAAA,WANyC;AAOzCC,EAAAA,qBAPyC;AAQzCC,EAAAA,qBARyC;AASzCC,EAAAA,kBATyC;AAUzCC,EAAAA,mBAVyC;AAWzCC,EAAAA,mBAXyC;AAYzCC,EAAAA,UAZyC;AAazCC,EAAAA,QAbyC;AAczCC,EAAAA,sBAdyC;AAezCC,EAAAA,iBAfyC;AAgBzCC,EAAAA,UAhByC;AAiBzCC,EAAAA,SAjByC;AAkBzCC,EAAAA;AAlByC,CAAD,KAmBpC;AACJ,QAAMC,gBAAqB,GAAIC,IAAD,IAAmC;AAC/D,YAAQjB,aAAR;AACE,WAAKN,aAAa,CAACwB,eAAnB;AACE,4BACE,oBAAC,2BAAD;AACE,UAAA,UAAU,EAAEnB,UADd;AAEE,UAAA,IAAI,EAAEkB,IAFR;AAGE,UAAA,OAAO,EAAEf;AAHX,UADF;;AAOF,WAAKR,aAAa,CAACyB,cAAnB;AACE,4BACE,oBAAC,0BAAD;AACE,UAAA,UAAU,EAAEpB,UADd;AAEE,UAAA,IAAI,EAAEkB,IAFR;AAGE,UAAA,OAAO,EAAEf;AAHX,UADF;;AAOF,WAAKR,aAAa,CAAC0B,IAAnB;AACE,4BACE,oBAAC,gBAAD;AACE,UAAA,UAAU,EAAErB,UADd;AAEE,UAAA,IAAI,EAAEkB,IAFR;AAGE,UAAA,iBAAiB,EAAEhB,iBAHrB;AAIE,UAAA,OAAO,EAAEC;AAJX,UADF;;AAQF,WAAKR,aAAa,CAAC2B,MAAnB;AACE,4BACE,oBAAC,kBAAD;AACE,UAAA,UAAU,EAAEtB,UADd;AAEE,UAAA,IAAI,EAAEkB,IAFR;AAGE,UAAA,iBAAiB,EAAEhB,iBAHrB;AAIE,UAAA,OAAO,EAAEC;AAJX,UADF;;AAQF,WAAKR,aAAa,CAAC4B,IAAnB;AACE,4BACE,oBAAC,gBAAD;AACE,UAAA,UAAU,EAAEvB,UADd;AAEE,UAAA,IAAI,EAAEkB,IAFR;AAGE,UAAA,OAAO,EAAEf;AAHX,UADF;;AAOF,WAAKR,aAAa,CAAC6B,IAAnB;AACE,eAAOxB,UAAU,CAACkB,IAAD,CAAjB;;AACF;AACE;AA9CJ;AAgDD,GAjDD;;AAmDA,sBACE,oBAAC,QAAD;AACE,IAAA,GAAG,EAAEd,WADP;AAEE,IAAA,qBAAqB,EAAEC,qBAFzB;AAGE,IAAA,qBAAqB,EAAEC,qBAHzB;AAIE,IAAA,IAAI,EAAEP,IAJR;AAKE,IAAA,UAAU,EAAEkB,gBALd;AAME,IAAA,UAAU,EAAEH,UANd;AAOE,IAAA,SAAS,EAAEC,SAPb;AAQE,IAAA,kBAAkB,EAAER,kBARtB;AASE,IAAA,mBAAmB,EAAEC,mBATvB;AAUE,IAAA,mBAAmB,EAAEC,mBAVvB;AAWE,IAAA,UAAU,EAAEC,UAXd;AAYE,IAAA,QAAQ,EAAEC,QAZZ;AAaE,IAAA,sBAAsB,EAAEC,sBAb1B;AAcE,IAAA,iBAAiB,EAAEC,iBAdrB;AAeE,IAAA,YAAY,EAAEG;AAfhB,IADF;AAmBD,CA1FD;;AA4FA,eAAelB,gBAAf","sourcesContent":["import React from 'react';\nimport {\n  FlatList,\n  ListRenderItemInfo,\n  NativeSyntheticEvent,\n  NativeScrollEvent,\n  StyleProp,\n  ViewStyle,\n  Insets,\n  ViewToken,\n} from 'react-native';\n\nimport {\n  SlideFromBottomAnimatedItem,\n  SlideFromRightAnimatedItem,\n  FadeAnimatedItem,\n  AnimationType,\n  RotateAnimatedItem,\n  DiveAnimatedItem,\n} from '.';\n\ninterface Props {\n  data: Array<any>;\n  renderItem: (item: any) => JSX.Element;\n  animationType: AnimationType;\n  animationDuration?: number;\n  focused?: boolean;\n  contentContainerStyle?: StyleProp<ViewStyle>;\n  scrollIndicatorInsets?: Insets;\n  flatlistRef?:\n    | ((instance: FlatList<object> | null) => void)\n    | React.RefObject<FlatList<object>>;\n  ListEmptyComponent?: React.ComponentType<any> | React.ReactElement;\n  ListHeaderComponent?: React.ComponentType<any> | React.ReactElement;\n  ListFooterComponent?: React.ComponentType<any> | React.ReactElement;\n  numColumns?: number;\n  onScroll?: (event: NativeSyntheticEvent<NativeScrollEvent>) => void;\n  onViewableItemsChanged?: (info: {\n    viewableItems: ViewToken[];\n    changed: ViewToken[];\n  }) => void;\n  viewabilityConfig?: any;\n  refreshing?: boolean;\n  onRefresh?: () => void;\n  keyExtractor?: (item: object, index: number) => string;\n}\n\nconst AnimatedFlatList: React.FC<Props> = ({\n  data,\n  renderItem,\n  animationType,\n  animationDuration,\n  focused = true,\n  flatlistRef,\n  contentContainerStyle,\n  scrollIndicatorInsets,\n  ListEmptyComponent,\n  ListHeaderComponent,\n  ListFooterComponent,\n  numColumns,\n  onScroll,\n  onViewableItemsChanged,\n  viewabilityConfig,\n  refreshing,\n  onRefresh,\n  keyExtractor,\n}) => {\n  const handleRenderItem: any = (args: ListRenderItemInfo<any>) => {\n    switch (animationType) {\n      case AnimationType.SlideFromBottom:\n        return (\n          <SlideFromBottomAnimatedItem\n            renderItem={renderItem}\n            args={args}\n            focused={focused}\n          />\n        );\n      case AnimationType.SlideFromRight:\n        return (\n          <SlideFromRightAnimatedItem\n            renderItem={renderItem}\n            args={args}\n            focused={focused}\n          />\n        );\n      case AnimationType.Fade:\n        return (\n          <FadeAnimatedItem\n            renderItem={renderItem}\n            args={args}\n            animationDuration={animationDuration}\n            focused={focused}\n          />\n        );\n      case AnimationType.Rotate:\n        return (\n          <RotateAnimatedItem\n            renderItem={renderItem}\n            args={args}\n            animationDuration={animationDuration}\n            focused={focused}\n          />\n        );\n      case AnimationType.Dive:\n        return (\n          <DiveAnimatedItem\n            renderItem={renderItem}\n            args={args}\n            focused={focused}\n          />\n        );\n      case AnimationType.None:\n        return renderItem(args);\n      default:\n        return;\n    }\n  };\n\n  return (\n    <FlatList\n      ref={flatlistRef}\n      contentContainerStyle={contentContainerStyle}\n      scrollIndicatorInsets={scrollIndicatorInsets}\n      data={data}\n      renderItem={handleRenderItem}\n      refreshing={refreshing}\n      onRefresh={onRefresh}\n      ListEmptyComponent={ListEmptyComponent}\n      ListHeaderComponent={ListHeaderComponent}\n      ListFooterComponent={ListFooterComponent}\n      numColumns={numColumns}\n      onScroll={onScroll}\n      onViewableItemsChanged={onViewableItemsChanged}\n      viewabilityConfig={viewabilityConfig}\n      keyExtractor={keyExtractor}\n    />\n  );\n};\n\nexport default AnimatedFlatList;\n"]}